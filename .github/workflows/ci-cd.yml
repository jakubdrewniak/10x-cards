name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '20'
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/ms-playwright

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run linting
        run: npm run lint
      
      - name: Run security scanning
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      
      - name: Cache Vitest
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.vitest
          key: ${{ runner.os }}-vitest-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-vitest-
      
      - name: Run unit tests
        run: npm test
      
      - name: Generate coverage report
        run: npm run test:coverage
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
        if: always()

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
      
      - name: Build the app
        run: npm run build
      
      - name: Run E2E tests
        env:
          CI: true
        run: npm run e2e
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  build:
    name: Production Build
    needs: [unit-test, e2e-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/
          retention-days: 7

  deploy:
    name: Deploy to DigitalOcean
    if: ${{ github.event_name == 'workflow_dispatch' || (github.ref == 'refs/heads/master' && github.event_name != 'pull_request') }}
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          password: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
      
      - name: Set deployment variables
        id: vars
        run: |
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_OUTPUT
          echo "ENVIRONMENT=${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_OUTPUT
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DIGITALOCEAN_REGISTRY_NAME }}/10x-cards:latest
          cache-to: type=inline
          tags: |
            registry.digitalocean.com/${{ secrets.DIGITALOCEAN_REGISTRY_NAME }}/10x-cards:${{ github.sha }}
            registry.digitalocean.com/${{ secrets.DIGITALOCEAN_REGISTRY_NAME }}/10x-cards:${{ steps.vars.outputs.ENVIRONMENT }}-${{ steps.vars.outputs.TIMESTAMP }}
            registry.digitalocean.com/${{ secrets.DIGITALOCEAN_REGISTRY_NAME }}/10x-cards:latest
      
      - name: Deploy to DigitalOcean App Platform
        uses: digitalocean/app_action@v1.1.5
        with:
          app_name: 10x-cards
          token: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          images: '[
            {
              "name": "10x-cards",
              "image": {
                "registry_type": "DOCR",
                "repository": "10x-cards",
                "tag": "${{ github.sha }}"
              }
            }
          ]'
      
      - name: Create Deployment Status
        uses: chrnorm/deployment-status@v2
        if: always()
        with:
          token: ${{ github.token }}
          state: ${{ job.status }}
          deployment-id: ${{ steps.deploy.outputs.deployment_id }}
          environment-url: ${{ steps.deploy.outputs.app_url }} 